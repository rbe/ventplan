#!/bin/bash
# 
# /Users/rbe/project/wac2/bwac
# 
# Copyright (C) 2010 Informationssysteme Ralf Bensmann.
# Nutzungslizenz siehe http://www.bensmann.com/BPL_v10_de.html
# Use is subject to license terms, see http://www.bensmann.com/BPL_v10_en.html
# 
# Created by: rbe
# 

# Base
USBSTICK=usbstick/wac

#
# Parse application version
#
_parse_version() {
	echo "$(grep app.version application.properties | awk -F= '{print $2}' | sed 's#\.# #g')"
}

#
# Increase actual Griffon application version.
#
_inc_version() {
	version=($(_parse_version))
	maj=${version[0]}
	min=${version[1]}
	pat=${version[2]}
	# Increase depending on parameter(s)
	for i in $*
	do
		eval "$i=$((i + 1))"
	done
	echo "${maj}.${min}.${pat}"
}

#
# Make update directory for actual version.
#
_make_update_dir() {
	version=($(_parse_version))
	maj=${version[0]}
	min=${version[1]}
	pat=${version[2]}
	# Create update directory for actual version
	u=wacupdate/upd${maj}${min}${pat}
	for d in conf lib sql
	do
		mkdir -p ${u}/${d}
	done
}

#
# Set next Griffon application version.
#
_set_next_version() {
	# Make update directory for actual version; before version number is increased
	_make_update_dir
	# Set Griffon application version
	nver=$(_inc_version $1)
	griffon set-version ${nver}
	# Parse new version number
	version=($(_parse_version))
	maj=${version[0]}
	min=${version[1]}
	pat=${version[2]}
	##t=tmp.$$
	##cat application.properties | sed "s#app.version.*#app.version=$maj.$min.$pat#g" > ${t}
	##mv ${t} application.properties
	# Copy next version into update directory
	u=wacupdate/upd${maj}${min}${pat}
	for i in conf lib sql
	do
		mkdir -p ${u}/${i}
	done
	echo "${maj}.${min}.${pat}" > ${u}/conf/version
	#
	echo "New version is ${nver}"
}

#
# Set actual Griffon application version in conf/version.
#
_conf_ver() {
	cat application.properties | grep app.version | awk -F= '{print $2}' > ${USBSTICK}/conf/version
}

#
# Build Odisee
#
_build_odisee() {
	if [ -d ../odisee ]; then
		echo "Building Odisee... see bwac.log"
		pushd ../odisee 2>/dev/null 1>&2
		bin/gbuild jar 2>>bwac.log 1>&2
		popd 2>/dev/null 1>&2
		# Copy Odisee jar into lib folder
		cp ../odisee/dist/odisee.jar lib 2>/dev/null 1>&2
	fi
}

#
# Build grootils
#
_build_grootils() {
	if [ -d ../grootils ]; then
		echo "Building grootils... see bwac.log"
		pushd ../grootils 2>/dev/null 1>&2
		bin/gbuild jar 2>>bwac.log 1>&2
		popd 2>/dev/null 1>&2
		# Copy Odisee jar into lib folder
		cp ../grootils/dist/grootils.jar lib 2>/dev/null 1>&2
	fi
}

#
# 
#
_build_wac() {
	echo "Building WAC..."
	griffon clean 2>/dev/null 1>&2
	echo "Packaging WAC... see bwac.log"
	griffon package 2>>bwac.log 1>&2
}

#
# Make directories for USB stick
#
_usbstick_make_dirs() {
	mkdir -p ${USBSTICK}/Darwin ${USBSTICK}/Linux ${USBSTICK}/Windows 2>/dev/null
	for dir in conf lib sql update
	do
		mkdir -p ${USBSTICK}/${dir}
	done
	for dir in Linux Windows
	do
		[ ! -d ${USBSTICK}/${dir}/jre6 ] && mkdir -p ${USBSTICK}/${dir}/jre6 2>/dev/null
	done
	# Windows: OOo Portable
	ooo=${USBSTICK}/Windows/OpenOfficePortable
	[ ! -d ${ooo} ] && mkdir -p ${ooo} 2>/dev/null
}

#
# Update SQL database in USB stick distribution
#
_usbstick_update_sql() {
	mkdir -p ${USBSTICK}/sql
	# Cleanup
	rm -rf ${USBSTICK}/sql/*
	# Create ZIP backup of database
	cd sql
	java -cp ../lib/h2*jar org.h2.tools.Backup -file westawac_db.zip -db westawac
	cd ..
	# Copy SQL data
	cp -R sql/westawac_db.zip ${USBSTICK}/sql
}

#
# Make USB stick distribution
#
_usbstick() {
	# Make directories
	_usbstick_make_dirs
	# Build Odisee
	_build_odisee
	# Build WAC
	_build_wac
	r=$?
	if [ $r -gt 0 ]; then
		echo "Build unsuccessful, see bwac.log"
		exit $r
	fi
	# Copy jar into lib folder
	rm -rf ${USBSTICK}/lib/*
	cp dist/zip/lib/* ${USBSTICK}/lib 2>/dev/null 1>&2
	# Copy start scripts
	cp bin/* ${USBSTICK}
	# SQL?
	if [ ! -d ${USBSTICK}/sql ]; then
		_usbstick_update_sql
	fi
	# Version
	_conf_ver
	#
	echo "Done"
}

case "$1" in
	inc-version)
		if [ $# -lt 2 ]; then
			echo "inc-version needs parameter: <maj | min | pat>"
			exit 1
		fi
		_set_next_version $2
	;;
	usbstick)
		: > bwac.log
		_usbstick
	;;
	usbstick-sql)
		_usbstick_update_sql
	;;
	*)
		echo "usage: $0 { usbstick | usbstick-sql | inc-version <maj | min | pat> }"
	;;
esac

exit 0
